return(-log_lik)
}
estimar_max_ver_binomial_negativa <- function(x){
chutes <- c(alpha = 0.4, mu = mean(x), sigma2 = var(x))
resultado <- optimx(
par = chutes,
fn = logveros_binomial_negativa,
x = x,
method = "L-BFGS-B",
lower = c(0, 0, 0),
upper = c(1, Inf, Inf)
)
return(c(alpha = resultado$alpha, mu = resultado$mu, sigma = resultado$sigma2))
}
logveros_geometrica <- function(parametros, x){
alpha <- parametros[1]
mu <- parametros[2]
n <- length(x)
p <- 1 / (1 + mu)
log_lik <- 0
for(t in 2:n){
probabilidade <- 0
for (k in 0:min(x[t], x[t-1])) {
probabilidade <- probabilidade + dbinom(k, x[t-1], alpha) * dgeom(x[t] - k, p)
}
log_lik <- log_lik + log(probabilidade)
}
return(-log_lik)
}
estimar_max_ver_geometrica <- function(x){
chutes <- c(alpha = 0.4, mu = mean(x))
resultado <- optimx(
par = chutes,
fn = logveros_geometrica,
x = x,
method = "L-BFGS-B",
lower = c(0, 0),
upper = c(1, Inf)
)
return(c(alpha = resultado$alpha, mu = resultado$mu))
}
set.seed(2025)
alpha_verdadeiro <- 0.7
lambda_verdadeiro <- 2
n <- 100
serie_poisson_100 <- simular_poisson(n, alpha = alpha_verdadeiro, lambda = lambda_verdadeiro)
serie_geometrica_100 <- simular_geometrica(n, alpha = alpha_verdadeiro, mu = lambda_verdadeiro)
serie_binomial_negativa_100 <- simular_binomial_negativa(n, alpha = alpha_verdadeiro, mu = lambda_verdadeiro, sigma2 = 4)
serie_poisson_150 <- simular_poisson(n = 150, alpha = alpha_verdadeiro, lambda = lambda_verdadeiro)
serie_geometrica_150 <- simular_geometrica(n = 150, alpha = alpha_verdadeiro, mu = lambda_verdadeiro)
serie_binomial_negativa_150 <- simular_binomial_negativa(n = 150, alpha = alpha_verdadeiro, mu = lambda_verdadeiro, sigma2 = 4)
serie_poisson_200 <- simular_poisson(n = 200, alpha = alpha_verdadeiro, lambda = lambda_verdadeiro)
serie_geometrica_200 <- simular_geometrica(n = 200, alpha = alpha_verdadeiro, mu = lambda_verdadeiro)
serie_binomial_negativa_200 <- simular_binomial_negativa(n = 200, alpha = alpha_verdadeiro, mu = lambda_verdadeiro, sigma2 = 4)
poisson_100 <- ts(serie_poisson_100)
binomial_negativa_100 <- ts(serie_binomial_negativa_100)
geometrica_100 <- ts(serie_geometrica_100)
series_100 <- cbind(poisson_100, binomial_negativa_100, geometrica_100)
colnames(series_100) <- c("Poisson", "Binomial Negativa", "Geometrica")
dygraph(series_100, main = "Visulização das Séries Temporais de Tamanho 100") %>%
dySeries("Poisson", label = "Poisson", drawPoints = TRUE, pointSize = 3) %>%
dySeries("Binomial Negativa", label = "Binomial Negativa", drawPoints = TRUE, pointSize = 3) %>%
dySeries("Geometrica", label = "Geométrica", drawPoints = TRUE, pointSize = 3 )
poisson_150 <- ts(serie_poisson_150)
binomial_negativa_150 <- ts(serie_binomial_negativa_150)
geometrica_150 <- ts(serie_geometrica_150)
series_150 <- cbind(poisson_150, binomial_negativa_150, geometrica_150)
colnames(series_150) <- c("Poisson", "Binomial Negativa", "Geometrica")
dygraph(series_150, main = "Visualização da Série Temporal de tamanho 150") %>%
dySeries("Poisson", label = "Poisson", drawPoints = TRUE, pointSize = 3) %>%
dySeries("Binomial Negativa", label = "Binomial Negativa", drawPoints = TRUE, pointSize = 3) %>%
dySeries("Geometrica", label = "Geométrica", drawPoints = TRUE, pointSize = 3)
poisson_150 <- ts(serie_poisson_150)
binomial_negativa_150 <- ts(serie_binomial_negativa_150)
geometrica_150 <- ts(serie_geometrica_150)
series_150 <- cbind(poisson_150, binomial_negativa_150, geometrica_150)
colnames(series_150) <- c("Poisson", "Binomial Negativa", "Geometrica")
dygraph(series_150, main = "Visualização da Série Temporal de tamanho 150") %>%
dySeries("Poisson", label = "Poisson", drawPoints = TRUE, pointSize = 3) %>%
dySeries("Binomial Negativa", label = "Binomial Negativa", drawPoints = TRUE, pointSize = 3) %>%
dySeries("Geometrica", label = "Geométrica", drawPoints = TRUE, pointSize = 3)
poisson_200 <- ts(serie_poisson_200)
binomial_negativa_200 <- ts(serie_binomial_negativa_200)
geometrica_200 <- ts(serie_geometrica_200)
series_200 <- cbind(poisson_200, binomial_negativa_200, geometrica_200)
colnames(series_200) <- c("Poisson", "Binomial Negativa", "Geometrica")
dygraph(series_200, main = "Visualização da Série Temporal de tamanho 200") %>%
dySeries("Poisson", label = "Poisson", drawPoints = TRUE, pointSize = 3) %>%
dySeries("Binomial Negativa", label = "Binomial Negativa", drawPoints = TRUE, pointSize = 3) %>%
dySeries("Geometrica", label = "Geométrica", drawPoints = TRUE, pointSize = 3)
min_quad_poi_100 <- minimos_quadrados(serie_poisson_100)
min_quad_bin_negativa_100 <- minimos_quadrados(serie_binomial_negativa_100)
min_quad_geometrica_100 <- minimos_quadrados(serie_geometrica_100)
min_quad_poi_150 <- minimos_quadrados(serie_poisson_150)
min_quad_bin_negativa_150 <- minimos_quadrados(serie_binomial_negativa_150)
min_quad_geometrica_150 <- minimos_quadrados(serie_geometrica_150)
min_quad_poi_200 <- minimos_quadrados(serie_poisson_200)
min_quad_bin_negativa_200 <- minimos_quadrados(serie_binomial_negativa_200)
min_quad_geometrica_200 <- minimos_quadrados(serie_geometrica_200)
max_vero_poisson_100 <- estimar_max_ver_poisson(serie_poisson_100)
max_vero_bin_nega_100 <- estimar_max_ver_binomial_negativa(serie_binomial_negativa_100)
max_vero_geom_100 <- estimar_max_ver_geometrica(serie_geometrica_100)
logveros_poisson <- function(parametros, x){
alpha <- parametros[1]
lambda <- parametros[2]
n <- length(x)
log_lik <- 0
for(t in 2:n){
probabilidade <- 0
for (k in 0:min(x[t], x[t-1])) {
probabilidade <- probabilidade + dbinom(k, x[t-1], alpha) * dpois(x[t] - k, lambda)
}
log_lik <- log_lik + log(probabilidade)
}
return(-log_lik)
}
estimar_max_ver_poisson <- function(x){
chutes <- c(alpha = 0.4, lambda = mean(x))
resultado <- optimx(
par = chutes,
fn = logveros_poisson,
x = x,
method = "BFGS",
lower = c(0, 0),
upper = c(1, Inf)
)
return(c(alpha = resultado$alpha, lambda = resultado$lambda))
}
logveros_binomial_negativa <- function(parametros, x){
alpha <- parametros[1]
mu <- parametros[2]
sigma2 <- parametros[3]
r <- mu^2 / (sigma2 - mu)
p <- mu / sigma2
n <- length(x)
log_lik <- 0
for (t in 2:n) {
probabilidade <- 0
for (k in 0:min(x[t], x[t-1])) {
probabilidade <- probabilidade + dbinom(k, x[t-1], alpha) * dnbinom(x[t] - k , size = r, prob = p)
}
log_lik <- log_lik + log(probabilidade)
}
return(-log_lik)
}
estimar_max_ver_binomial_negativa <- function(x){
chutes <- c(alpha = 0.4, mu = mean(x), sigma2 = var(x))
resultado <- optimx(
par = chutes,
fn = logveros_binomial_negativa,
x = x,
method = "BFGS",
lower = c(0, 0, 0),
upper = c(1, Inf, Inf)
)
return(c(alpha = resultado$alpha, mu = resultado$mu, sigma = resultado$sigma2))
}
logveros_geometrica <- function(parametros, x){
alpha <- parametros[1]
mu <- parametros[2]
n <- length(x)
p <- 1 / (1 + mu)
log_lik <- 0
for(t in 2:n){
probabilidade <- 0
for (k in 0:min(x[t], x[t-1])) {
probabilidade <- probabilidade + dbinom(k, x[t-1], alpha) * dgeom(x[t] - k, p)
}
log_lik <- log_lik + log(probabilidade)
}
return(-log_lik)
}
estimar_max_ver_geometrica <- function(x){
chutes <- c(alpha = 0.4, mu = mean(x))
resultado <- optimx(
par = chutes,
fn = logveros_geometrica,
x = x,
method = "BFGS",
lower = c(0, 0),
upper = c(1, Inf)
)
return(c(alpha = resultado$alpha, mu = resultado$mu))
}
max_vero_poisson_100 <- estimar_max_ver_poisson(serie_poisson_100)
max_vero_bin_nega_100 <- estimar_max_ver_binomial_negativa(serie_binomial_negativa_100)
max_vero_geom_100 <- estimar_max_ver_geometrica(serie_geometrica_100)
max_vero_poisson_150 <- estimar_max_ver_poisson(serie_poisson_150)
max_vero_bin_nega_150 <- estimar_max_ver_binomial_negativa(serie_binomial_negativa_150)
max_vero_geom_150 <- estimar_max_ver_geometrica(serie_geometrica_150)
max_vero_poisson_200 <- estimar_max_ver_poisson(serie_poisson_200)
max_vero_bin_nega_200 <- estimar_max_ver_binomial_negativa(serie_binomial_negativa_200)
max_vero_geom_200 <- estimar_max_ver_geometrica(serie_geometrica_200)
logveros_poisson <- function(parametros, x){
alpha <- parametros[1]
lambda <- parametros[2]
n <- length(x)
log_lik <- 0
for(t in 2:n){
probabilidade <- 0
for (k in 0:min(x[t], x[t-1])) {
probabilidade <- probabilidade + dbinom(k, x[t-1], alpha) * dpois(x[t] - k, lambda)
}
log_lik <- log_lik + log(probabilidade)
}
return(-log_lik)
}
estimar_max_ver_poisson <- function(x){
chutes <- c(alpha = 0.4, lambda = mean(x))
resultado <- optimx(
par = chutes,
fn = logveros_poisson,
x = x,
method = "Nelder-Mead",
lower = c(0, 0),
upper = c(1, Inf)
)
return(c(alpha = resultado$alpha, lambda = resultado$lambda))
}
logveros_binomial_negativa <- function(parametros, x){
alpha <- parametros[1]
mu <- parametros[2]
sigma2 <- parametros[3]
r <- mu^2 / (sigma2 - mu)
p <- mu / sigma2
n <- length(x)
log_lik <- 0
for (t in 2:n) {
probabilidade <- 0
for (k in 0:min(x[t], x[t-1])) {
probabilidade <- probabilidade + dbinom(k, x[t-1], alpha) * dnbinom(x[t] - k , size = r, prob = p)
}
log_lik <- log_lik + log(probabilidade)
}
return(-log_lik)
}
estimar_max_ver_binomial_negativa <- function(x){
chutes <- c(alpha = 0.4, mu = mean(x), sigma2 = var(x))
resultado <- optimx(
par = chutes,
fn = logveros_binomial_negativa,
x = x,
method = "Nelder-Mead",
lower = c(0, 0, 0),
upper = c(1, Inf, Inf)
)
return(c(alpha = resultado$alpha, mu = resultado$mu, sigma = resultado$sigma2))
}
logveros_geometrica <- function(parametros, x){
alpha <- parametros[1]
mu <- parametros[2]
n <- length(x)
p <- 1 / (1 + mu)
log_lik <- 0
for(t in 2:n){
probabilidade <- 0
for (k in 0:min(x[t], x[t-1])) {
probabilidade <- probabilidade + dbinom(k, x[t-1], alpha) * dgeom(x[t] - k, p)
}
log_lik <- log_lik + log(probabilidade)
}
return(-log_lik)
}
estimar_max_ver_geometrica <- function(x){
chutes <- c(alpha = 0.4, mu = mean(x))
resultado <- optimx(
par = chutes,
fn = logveros_geometrica,
x = x,
method = "Nelder-Mead",
lower = c(0, 0),
upper = c(1, Inf)
)
return(c(alpha = resultado$alpha, mu = resultado$mu))
}
max_vero_poisson_100 <- estimar_max_ver_poisson(serie_poisson_100)
max_vero_bin_nega_100 <- estimar_max_ver_binomial_negativa(serie_binomial_negativa_100)
max_vero_geom_100 <- estimar_max_ver_geometrica(serie_geometrica_100)
max_vero_poisson_150 <- estimar_max_ver_poisson(serie_poisson_150)
max_vero_bin_nega_150 <- estimar_max_ver_binomial_negativa(serie_binomial_negativa_150)
max_vero_geom_150 <- estimar_max_ver_geometrica(serie_geometrica_150)
max_vero_poisson_200 <- estimar_max_ver_poisson(serie_poisson_200)
max_vero_bin_nega_200 <- estimar_max_ver_binomial_negativa(serie_binomial_negativa_200)
max_vero_geom_200 <- estimar_max_ver_geometrica(serie_geometrica_200)
simulacao_monte_carlo <- function(n_simulacoes, n_amostra, alpha_verdadeiro, mu_verdadeiro, sigma_verdadeiro, distribuicao){
variavel <- ifelse(distribuicao %in% c("poisson", "geometrica"), 2, 3)
resultados_CLS <- matrix(NA, nrow = n_simulacoes, ncol = 2)
resultados_CML <- matrix(NA, nrow = n_simulacoes, ncol = variavel)
if(distribuicao == "poisson"){
for (i in 1:n_simulacoes) {
x <- simular_poisson(n = n_amostra, alpha = alpha_verdadeiro, lambda = mu_verdadeiro)
resultados_CLS[i, ] <- minimos_quadrados(x)
resultados_CML[i, ] <- estimar_max_ver_poisson(x)
}
}
if(distribuicao == "binomial"){
for (i in 1:n_simulacoes) {
x <- simular_binomial_negativa(n = n_amostra, alpha = alpha_verdadeiro, mu = mu_verdadeiro, sigma2 = sigma_verdadeiro)
resultados_CLS[i, ] <- minimos_quadrados(x)
resultados_CML[i, ] <- estimar_max_ver_binomial_negativa(x)
}
}
if(distribuicao == "geometrica"){
for (i in 1:n_simulacoes) {
x <- simular_geometrica(n = n_amostra, alpha = alpha_verdadeiro, mu = mu_verdadeiro)
resultados_CLS[i, ] <- minimos_quadrados(x)
resultados_CML[i, ] <- estimar_max_ver_geometrica(x)
}
}
media_CLS <- colMeans(resultados_CLS, na.rm = T)
variancia_CLS <- apply(resultados_CLS, 2, var, na.rm = T)
media_CML <- colMeans(resultados_CML, na.rm = T)
variancia_CML <- apply(resultados_CML, 2, var, na.rm = T)
return(list(
media_Minimos_Quadrados_condicionais = media_CLS,
variancia_Minimos_Quadrados_condicionais = variancia_CLS,
media_Maxima_verossimilhanca_condicional = media_CML,
variancia_Maxima_verossimilhanca_condicional = variancia_CML,
minimos_quadrados_resultado <- resultados_CLS,
maxima_verossimilhanca_resultado <- resultados_CML
))
}
resultados_geom_50 <- simulacao_monte_carlo(n_simulacoes = 100, n_amostra = 50, alpha_verdadeiro = 0.6, mu_verdadeiro = 2, sigma_verdadeiro = 1, distribuicao = "binomial")
simulacao_monte_carlo <- function(n_simulacoes, n_amostra, alpha_verdadeiro, mu_verdadeiro, sigma_verdadeiro, distribuicao){
distribuicao <- distribuicao
variavel <- ifelse(distribuicao %in% c("poisson", "geometrica"), 2, 3)
resultados_CLS <- matrix(NA, nrow = n_simulacoes, ncol = 2)
resultados_CML <- matrix(NA, nrow = n_simulacoes, ncol = variavel)
if(distribuicao == "poisson"){
for (i in 1:n_simulacoes) {
x <- simular_poisson(n = n_amostra, alpha = alpha_verdadeiro, lambda = mu_verdadeiro)
resultados_CLS[i, ] <- minimos_quadrados(x)
resultados_CML[i, ] <- estimar_max_ver_poisson(x)
}
}
if(distribuicao == "binomial"){
for (i in 1:n_simulacoes) {
x <- simular_binomial_negativa(n = n_amostra, alpha = alpha_verdadeiro, mu = mu_verdadeiro, sigma2 = sigma_verdadeiro)
resultados_CLS[i, ] <- minimos_quadrados(x)
resultados_CML[i, ] <- estimar_max_ver_binomial_negativa(x)
}
}
if(distribuicao == "geometrica"){
for (i in 1:n_simulacoes) {
x <- simular_geometrica(n = n_amostra, alpha = alpha_verdadeiro, mu = mu_verdadeiro)
resultados_CLS[i, ] <- minimos_quadrados(x)
resultados_CML[i, ] <- estimar_max_ver_geometrica(x)
}
}
media_CLS <- colMeans(resultados_CLS, na.rm = T)
variancia_CLS <- apply(resultados_CLS, 2, var, na.rm = T)
media_CML <- colMeans(resultados_CML, na.rm = T)
variancia_CML <- apply(resultados_CML, 2, var, na.rm = T)
return(list(
media_Minimos_Quadrados_condicionais = media_CLS,
variancia_Minimos_Quadrados_condicionais = variancia_CLS,
media_Maxima_verossimilhanca_condicional = media_CML,
variancia_Maxima_verossimilhanca_condicional = variancia_CML,
minimos_quadrados_resultado <- resultados_CLS,
maxima_verossimilhanca_resultado <- resultados_CML
))
}
resultados_geom_50 <- simulacao_monte_carlo(n_simulacoes = 100, n_amostra = 50, alpha_verdadeiro = 0.6, mu_verdadeiro = 2, sigma_verdadeiro = 1, distribuicao = "binomial")
simulacao_monte_carlo <- function(n_simulacoes, n_amostra, alpha_verdadeiro, mu_verdadeiro, sigma_verdadeiro, distribuicao){
distribuicao <- distribuicao
variavel <- ifelse(distribuicao == "binomial", 3, 2)
resultados_CLS <- matrix(NA, nrow = n_simulacoes, ncol = 2)
resultados_CML <- matrix(NA, nrow = n_simulacoes, ncol = variavel)
if(distribuicao == "poisson"){
for (i in 1:n_simulacoes) {
x <- simular_poisson(n = n_amostra, alpha = alpha_verdadeiro, lambda = mu_verdadeiro)
resultados_CLS[i, ] <- minimos_quadrados(x)
resultados_CML[i, ] <- estimar_max_ver_poisson(x)
}
}
if(distribuicao == "binomial"){
for (i in 1:n_simulacoes) {
x <- simular_binomial_negativa(n = n_amostra, alpha = alpha_verdadeiro, mu = mu_verdadeiro, sigma2 = sigma_verdadeiro)
resultados_CLS[i, ] <- minimos_quadrados(x)
resultados_CML[i, ] <- estimar_max_ver_binomial_negativa(x)
}
}
if(distribuicao == "geometrica"){
for (i in 1:n_simulacoes) {
x <- simular_geometrica(n = n_amostra, alpha = alpha_verdadeiro, mu = mu_verdadeiro)
resultados_CLS[i, ] <- minimos_quadrados(x)
resultados_CML[i, ] <- estimar_max_ver_geometrica(x)
}
}
media_CLS <- colMeans(resultados_CLS, na.rm = T)
variancia_CLS <- apply(resultados_CLS, 2, var, na.rm = T)
media_CML <- colMeans(resultados_CML, na.rm = T)
variancia_CML <- apply(resultados_CML, 2, var, na.rm = T)
return(list(
media_Minimos_Quadrados_condicionais = media_CLS,
variancia_Minimos_Quadrados_condicionais = variancia_CLS,
media_Maxima_verossimilhanca_condicional = media_CML,
variancia_Maxima_verossimilhanca_condicional = variancia_CML,
minimos_quadrados_resultado <- resultados_CLS,
maxima_verossimilhanca_resultado <- resultados_CML
))
}
resultados_geom_50 <- simulacao_monte_carlo(n_simulacoes = 100, n_amostra = 50, alpha_verdadeiro = 0.6, mu_verdadeiro = 2, sigma_verdadeiro = 1, distribuicao = "binomial")
logveros_poisson <- function(parametros, x){
alpha <- parametros[1]
lambda <- parametros[2]
n <- length(x)
log_lik <- 0
for(t in 2:n){
probabilidade <- 0
for (k in 0:min(x[t], x[t-1])) {
probabilidade <- probabilidade + dbinom(k, x[t-1], alpha) * dpois(x[t] - k, lambda)
}
log_lik <- log_lik + log(probabilidade)
}
return(-log_lik)
}
estimar_max_ver_poisson <- function(x){
chutes <- c(alpha = 0.4, lambda = mean(x))
resultado <- optimx(
par = chutes,
fn = logveros_poisson,
x = x,
method = "Nelder-Mead",
lower = c(0, 0),
upper = c(1, Inf)
)
return(c(alpha = resultado$alpha, lambda = resultado$lambda))
}
logveros_binomial_negativa <- function(parametros, x){
alpha <- parametros[1]
mu <- parametros[2]
sigma2 <- parametros[3]
r <- mu^2 / (sigma2 - mu)
p <- mu / sigma2
n <- length(x)
log_lik <- 0
for (t in 2:n) {
probabilidade <- 0
for (k in 0:min(x[t], x[t-1])) {
probabilidade <- probabilidade + dbinom(k, x[t-1], alpha) * dnbinom(x[t] - k , size = r, prob = p)
}
log_lik <- log_lik + log(probabilidade)
}
return(-log_lik)
}
estimar_max_ver_binomial_negativa <- function(x){
chutes <- c(alpha = 0.4, mu = mean(x, na.rm = T), sigma2 = var(x, na.rm = T))
resultado <- optimx(
par = chutes,
fn = logveros_binomial_negativa,
x = x,
method = "Nelder-Mead",
lower = c(0, 0, 0),
upper = c(1, Inf, Inf)
)
return(c(alpha = resultado$alpha, mu = resultado$mu, sigma = resultado$sigma2))
}
logveros_geometrica <- function(parametros, x){
alpha <- parametros[1]
mu <- parametros[2]
n <- length(x)
p <- 1 / (1 + mu)
log_lik <- 0
for(t in 2:n){
probabilidade <- 0
for (k in 0:min(x[t], x[t-1])) {
probabilidade <- probabilidade + dbinom(k, x[t-1], alpha) * dgeom(x[t] - k, p)
}
log_lik <- log_lik + log(probabilidade)
}
return(-log_lik)
}
estimar_max_ver_geometrica <- function(x){
chutes <- c(alpha = 0.4, mu = mean(x))
resultado <- optimx(
par = chutes,
fn = logveros_geometrica,
x = x,
method = "Nelder-Mead",
lower = c(0, 0),
upper = c(1, Inf)
)
return(c(alpha = resultado$alpha, mu = resultado$mu))
}
resultados_geom_50 <- simulacao_monte_carlo(n_simulacoes = 100, n_amostra = 50, alpha_verdadeiro = 0.6, mu_verdadeiro = 2, sigma_verdadeiro = 1, distribuicao = "binomial")
# Funções de Verossimilhança Robustas - Versão Final
logveros_poisson <- function(parametros, x) {
# Verificação rigorosa dos parâmetros
if(any(is.na(parametros)) return(1e10)
# Funções de Verossimilhança Robustas - Versão Final
logveros_poisson <- function(parametros, x) {
# Verificação rigorosa dos parâmetros
if(any(is.na(parametros)) return(1e10)
# Funções de Verossimilhança Robustas - Versão Final
logveros_poisson <- function(parametros, x) {
# Verificação rigorosa dos parâmetros
if(any(is.na(parametros)) return(1e10)
# Função de Verossimilhança Poisson - Versão Final
logveros_poisson <- function(parametros, x) {
tryCatch({
alpha <- parametros[1]
lambda <- parametros[2]
# Verificações rigorosas
if(any(is.na(c(alpha, lambda))) return(1e10)
# Função de Verossimilhança Poisson - Versão Final
logveros_poisson <- function(parametros, x) {
tryCatch({
alpha <- parametros[1]
lambda <- parametros[2]
# Verificações rigorosas
if(any(is.na(c(alpha, lambda))) return(1e10)
